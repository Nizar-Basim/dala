calci 
%{
#include "y.tab.h"
%}

%%
[0-9]+    { yylval = atoi(yytext); return NUMBER; }
[-+*/\n] { return *yytext; }
[ \t]     ;  /* skip whitespace */
.         { fprintf(stderr, "Invalid character: %s\n", yytext); }
%%

int yywrap() {
    return 1;
}


yacc
%{
#include <stdio.h>
#include <stdlib.h>

extern int yylex();
extern int yyparse();
extern FILE* yyin;
void yyerror(const char *s);

%}

%token NUMBER
%left '+' '-'
%left '*' '/'

%%

calc    : expr                    { printf("Result: %d\n", $1); }
        ;

expr    : expr '+' expr          { $$ = $1 + $3; }
        | expr '-' expr          { $$ = $1 - $3; }
        | expr '*' expr          { $$ = $1 * $3; }
        | expr '/' expr          { $$ = $1 / $3; }
        | NUMBER                 { $$ = $1; }
        ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s);
}

int main() {
    yyin = stdin;
    yyparse();
    return 0;
}

flex calculator.l
yacc -d calculator.y
gcc -o calculator y.tab.c lex.yy.c -ll
./calculator
